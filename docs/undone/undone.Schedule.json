{"name":"Schedule","qualifiedName":"undone/undone.Schedule","comment":"<p>An asynchronous schedule of actions.</p>\n<p>A schedule is a function that can be <a>undone/undone.Schedule.call</a>ed with <a>undone/undone.Action</a>s.  The order \nof such calls is preserved in a history to allow for <a>undone/undone.Schedule.undo</a> and <a>undone/undone.Schedule.redo</a>.  An \naction may be scheduled at any time; if the schedule <a>undone/undone.Schedule.isIdle</a> then it will \nbe called immediately, otherwise it will be queued to be called as soon \nas possible.  </p>\n<p>Methods to change the history such as <a>undone/undone.Schedule.undo</a> and <a>undone/undone.Schedule.redo</a> can <em>not</em> be invoked \nwhen the schedule <a>undone/undone.Schedule.isBusy</a>.  This ensures that all enqueued actions are \ncalled and the schedule reaches an idle state before the history may be \nmodified.  </p>\n<p>Each schedule is a state machine, and its <a>undone/undone.Schedule.states</a> are observable as a \nstream; this provides a convenient means to connect a user interface to the \nhistory control methods.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"STATE_IDLE":{"name":"STATE_IDLE","qualifiedName":"undone/undone.Schedule.STATE_IDLE","comment":"<p>A schedule is idle (not busy).</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_CALL":{"name":"STATE_CALL","qualifiedName":"undone/undone.Schedule.STATE_CALL","comment":"<p>A schedule is busy executing a new action.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_FLUSH":{"name":"STATE_FLUSH","qualifiedName":"undone/undone.Schedule.STATE_FLUSH","comment":"<p>A schedule is busy flushing pending actions.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_REDO":{"name":"STATE_REDO","qualifiedName":"undone/undone.Schedule.STATE_REDO","comment":"<p>A schedule is busy performing a redo operation.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_UNDO":{"name":"STATE_UNDO","qualifiedName":"undone/undone.Schedule.STATE_UNDO","comment":"<p>A schedule is busy performing an undo operation.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_TO":{"name":"STATE_TO","qualifiedName":"undone/undone.Schedule.STATE_TO","comment":"<p>A schedule is busy performing a to operation.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"STATE_ERROR":{"name":"STATE_ERROR","qualifiedName":"undone/undone.Schedule.STATE_ERROR","comment":"<p>A schedule has an error.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"history":{"name":"history","qualifiedName":"undone/undone.Schedule.history","comment":"<p>A read-only view of this schedule's history of actions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.UnmodifiableListView","inner":[{"outer":"undone/undone.Action","inner":[]}]}],"parameters":{},"annotations":[]},"nextRedo":{"name":"nextRedo","qualifiedName":"undone/undone.Schedule.nextRedo","comment":"<p>The current index of the next action for redo in this schedule's <a>undone/undone.Schedule.history</a>\nor <code>-1</code> if none.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"nextUndo":{"name":"nextUndo","qualifiedName":"undone/undone.Schedule.nextUndo","comment":"<p>The current index of the next action for undo in this schedule's <a>undone/undone.Schedule.history</a>\nor <code>-1</code> if none.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isBusy":{"name":"isBusy","qualifiedName":"undone/undone.Schedule.isBusy","comment":"<p>Whether or not this schedule is busy performing another action.</p>\n<p>This is always <code>true</code> when called from any continuations that are\nchained to futures returned by methods on this schedule.  This is also \n<code>true</code> if this schedule has an <a>undone/undone.Schedule.error</a>.</p>\n<p>This is equivalent to <code>!isIdle</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isIdle":{"name":"isIdle","qualifiedName":"undone/undone.Schedule.isIdle","comment":"<p>Whether or not this schedule is in its <a>undone/undone.Schedule.STATE_IDLE</a>.</p>\n<p>This is equivalent to <code>!isBusy</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"canClear":{"name":"canClear","qualifiedName":"undone/undone.Schedule.canClear","comment":"<p>Whether or not this schedule can be <a>undone/undone.Schedule.clear</a>ed at the present time.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"canRedo":{"name":"canRedo","qualifiedName":"undone/undone.Schedule.canRedo","comment":"<p>Whether or not the <a>undone/undone.Schedule.redo</a> method may be called at the present time.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"canUndo":{"name":"canUndo","qualifiedName":"undone/undone.Schedule.canUndo","comment":"<p>Whether or not the <a>undone/undone.Schedule.undo</a> method may be called at the present time.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasError":{"name":"hasError","qualifiedName":"undone/undone.Schedule.hasError","comment":"<p>Whether or not this schedule has an <a>undone/undone.Schedule.error</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"error":{"name":"error","qualifiedName":"undone/undone.Schedule.error","comment":"<p>The current error, if <a>undone/undone.Schedule.hasError</a> is <code>true</code>.  </p>\n<p>Calling <a>undone/undone.Schedule.isBusy</a> on this schedule will return <code>true</code> for as long as this \nschedule <a>undone/undone.Schedule.hasError</a>.  You may <a>undone/undone.Schedule.clear</a> this schedule after dealing with the\nerror condition in order to use it again.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"stackTrace":{"name":"stackTrace","qualifiedName":"undone/undone.Schedule.stackTrace","comment":"<p>The current <a>undone/undone.Schedule.error</a>'s stack trace, if <a>undone/undone.Schedule.hasError</a> is <code>true</code> and a stack\ntrace is available.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"states":{"name":"states","qualifiedName":"undone/undone.Schedule.states","comment":"<p>An observable stream of this schedule's state transitions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"undone/undone.Schedule.Schedule-","comment":"<p>Creates a new schedule.</p>\n<p>An optional <a>undone/undone.Schedule.Schedule-.history</a> list may be given for this schedule to use.  The\ngiven list must support modification.  If not given a new list is created.</p>\n<p>When a <a>undone/undone.Schedule.Schedule-.history</a> list is given a <a>undone/undone.Schedule.Schedule-.nextUndo</a> index may also be given to\nspecify the initial index for undo and redo.  If not given the <a>undone/undone.Schedule.Schedule-.nextUndo</a>\nindex will be set to one less than the length of the history list.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"history":{"name":"history","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"undone/undone.Action","inner":[]}]}],"value":"null","annotations":[]},"nextUndo":{"name":"nextUndo","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"undone/undone.Schedule.call","comment":"<p>Schedule the given <a>undone/undone.Schedule.call.action</a> to be called.  </p>\n<p>If this schedule <a>undone/undone.Schedule.isIdle</a>, the action will be called immediately.  Else, \nthe action will be deferred in order behind any other pending actions to \nbe called once this schedule reaches an idle state.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"undone/undone.Action","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"undone/undone.Schedule.clear","comment":"<p>Clears this schedule if <a>undone/undone.Schedule.canClear</a> is <code>true</code> at this time and returns\n<code>true</code> if the operation succeeds or <code>false</code> if it does not succeed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"redo":{"name":"redo","qualifiedName":"undone/undone.Schedule.redo","comment":"<p>Redo the next action to be redone in this schedule, if any.</p>\n<p>Completes <code>true</code> if an action was redone or else completes <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"to":{"name":"to","qualifiedName":"undone/undone.Schedule.to","comment":"<p>Undo or redo all ordered actions in this schedule until the given <a>undone/undone.Schedule.to.action</a> \nis done.  </p>\n<p>The state of the schedule after this operation is equal to the state upon \ncompletion of the given action. Completes <code>false</code> if any undo or redo \noperations performed complete <code>false</code>, if the schedule does not contain \nthe given action, or if the schedule <a>undone/undone.Schedule.isBusy</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"undo":{"name":"undo","qualifiedName":"undone/undone.Schedule.undo","comment":"<p>Undo the next action to be undone in this schedule, if any.\nCompletes <code>true</code> if an action was undone or else completes <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"wait":{"name":"wait","qualifiedName":"undone/undone.Schedule.wait","comment":"<p>Wait for this schedule to reach the given <a>undone/undone.Schedule.wait.state</a>.</p>\n<p>Completes on the next transition to the given state, or immediately if the \nstate is the current state of this schedule.  Completes an <a>dart-core.ArgumentError</a>\nif the given <a>undone/undone.Schedule.wait.state</a> is not valid.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"state":{"name":"state","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"undone/undone.Schedule.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>undone/undone.Schedule.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"undone/undone.Schedule.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"undone/undone.Schedule.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>undone/undone.Schedule.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>undone/undone.Schedule.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"undone/undone.Schedule.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"undone/undone.Schedule.noSuchMethod","comment":"<p><a>undone/undone.Schedule.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>undone/undone.Schedule.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>undone/undone.Schedule.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>undone/undone.Schedule.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}