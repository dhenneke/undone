{"name":"Transaction","qualifiedName":"undone/undone.Transaction","comment":"<p>A sequence of actions that are done and undone together as if one action.</p>\n<p>A transaction is itself an action that may be <a>undone/undone.Action.call</a>ed on a schedule.\nWhen a transaction is scheduled to be done or undone it will do or undo\nall of its actions in sequence.  Any errors that occur when doing one of\nits actions will cause the transaction to attempt to undo all of its actions\nthat were done prior to the error; this is known as rollback.  These errors\nwill be wrapped in a <a>undone/undone.TransactionError</a> and completed to the caller.</p>","isAbstract":false,"superclass":"undone/undone.Action","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"canUndo":{"name":"canUndo","qualifiedName":"undone/undone.Action.canUndo","comment":"<p>Whether or not this action can be undone.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"context":{"name":"context","qualifiedName":"undone/undone.Action.context","comment":"<p>An optional context for this action.</p>\n<p>The context allows user-defined data such as a description or label to be\nattached to an action as an alternative to defining a new type of action.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"undone/undone.Action.timeout","comment":"<p>The maximum allowed duration for this action's <a>undone/undone.Do</a> or <a>undone/undone.Undo</a> function.</p>\n<p>The default value is 30 seconds unless otherwise specified in the \nnew Action constructor.</p>\n<p>When a timeout occurs, this action will complete with an error.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.Duration","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"undone/undone.Transaction.Transaction-","comment":"<p>Creates a new empty transaction.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"undone/undone.Transaction.add","comment":"<p>Adds the given <a>undone/undone.Transaction.add.action</a> to this transaction.</p>\n<p>Only undoable actions may be added to a transaction.  An error will be \nthrown if action.canUndo is <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"action":{"name":"action","optional":"false","named":"false","default":"false","type":[{"outer":"undone/undone.Action","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"undone/undone.Transaction.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>undone/undone.Transaction.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"undone/undone.Transaction.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"undone/undone.Transaction.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>undone/undone.Transaction.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>undone/undone.Transaction.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"undone/undone.Transaction.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"undone.Action.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"undone/undone.Transaction.noSuchMethod","comment":"<p><a>undone/undone.Transaction.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>undone/undone.Transaction.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>undone/undone.Transaction.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>undone/undone.Transaction.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"call":{"name":"call","qualifiedName":"undone/undone.Transaction.call","comment":"<p>Schedules this action to be called on the top-level <a>undone/undone.schedule</a>.  </p>\n<p>If this action is called within the scope of a top-level <a>undone/undone.transact</a> method\nit will instead be added to that transaction.  Completes with the result \nof the action in both cases.</p>","commentFrom":"","inheritedFrom":"undone.Action.call","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}