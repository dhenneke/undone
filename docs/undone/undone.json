{"name":"undone","qualifiedName":"undone/undone","comment":"<p>A library for undo and redo.</p>","variables":{"schedule":{"name":"schedule","qualifiedName":"undone/undone.schedule","comment":"<p>The isolate's top-level <a>undone/undone.Schedule</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"undone/undone.Schedule","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"redo":{"name":"redo","qualifiedName":"undone/undone.redo","comment":"<p>Redo the next action to be redone in the top-level <a>undone/undone.schedule</a>, if any.</p>\n<p>Completes <code>true</code> if an action was redone or else completes <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"undo":{"name":"undo","qualifiedName":"undone/undone.undo","comment":"<p>Undo the next action to be undone in the top-level <a>undone/undone.schedule</a>, if any.</p>\n<p>Completes <code>true</code> if an action was undone or else completes <code>false</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"transact":{"name":"transact","qualifiedName":"undone/undone.transact","comment":"<p>Build and compute a <a>undone/undone.Transaction</a> using the top-level <a>undone/undone.schedule</a>.</p>\n<p>Returns a Future for the transaction's completion.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"build":{"name":"build","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Schedule","qualifiedName":"undone/undone.Schedule","preview":"<p>An asynchronous schedule of actions.</p>"},{"name":"Transaction","qualifiedName":"undone/undone.Transaction","preview":"<p>A sequence of actions that are done and undone together as if one action.</p>"},{"name":"Action","qualifiedName":"undone/undone.Action","preview":"<p>An action that can be done and undone.</p>"}],"typedef":{"Undo":{"name":"Undo","qualifiedName":"undone/undone.Undo","comment":"<p>A function to undo an operation on an [arg] given the prior [result].</p>\n<p>The return type of this function should be either <code>void</code> or <code>Future</code>.</p>","return":"dynamic","parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"undone/undone.Undo.A","inner":[]}],"value":"null","annotations":[]},"result":{"name":"result","optional":false,"named":false,"default":false,"type":[{"outer":"undone/undone.Undo.R","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{"A":{"name":"A","type":"dart.core.Object"},"R":{"name":"R","type":"dart.core.Object"}},"preview":"<p>A function to undo an operation on an [arg] given the prior [result].</p>"},"Do":{"name":"Do","qualifiedName":"undone/undone.Do","comment":"<p>A function to do an operation on an [arg] and return a result.</p>\n<p>The return type of this function should be either <code>R</code> or <code>Future&lt;R&gt;</code>.</p>","return":"dynamic","parameters":{"arg":{"name":"arg","optional":false,"named":false,"default":false,"type":[{"outer":"undone/undone.Do.A","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{"A":{"name":"A","type":"dart.core.Object"},"R":{"name":"R","type":"dart.core.Object"}},"preview":"<p>A function to do an operation on an [arg] and return a result.</p>"}},"error":[{"name":"TransactionError","qualifiedName":"undone/undone.TransactionError","preview":"<p>An error encountered during a transaction.</p>"}]},"packageName":"undone","packageIntro":"<h1>Undone</h1>\n<p>A library for undo and redo.</p>\n<p><a href=\"https://drone.io/github.com/rmsmith/undone/latest\">!<a href=\"https://drone.io/github.com/rmsmith/undone/status.png\">Build Status</a></a> | <a href=\"http://rmsmith.github.com/undone/index.html#undone\">API documentation</a> | <a href=\"http://rmsmith.github.com/undone/nudge.html\">Try it!</a></p>\n<h2>Usage</h2>\n<h3>Create an Action from Functions</h3>\n<pre class=\"dart\"><code>// An argument for our undoable actions.\nvar map = { 'value' : 42 };\n  \n// Actions bind a 'Do' functon and an 'Undo' function together with arguments.\nDo _increment = (a) =&gt; ++a['value'];\nUndo _decrement = (a, r) =&gt; --a['value'];     \nvar increment = new Action(map, _increment, _decrement);\n</code></pre>\n<h3>Create an Action from a Class</h3>\n<pre class=\"dart\"><code>// Define an Action subclass when you want your own type.\nclass Square extends Action {\n  static _square(a) =&gt; a['value'] = a['value'] * a['value'];  \n  static _squareRoot(a, r) =&gt; a['value'] = math.sqrt(a['value']);  \n  Square(map): super(map, _square, _squareRoot);  \n}\n\nvar square = new Square(map);\n</code></pre>\n<h3>Do an Action</h3>\n<pre class=\"dart\"><code>// Call your action, and listen for the result (if you want) - its easy!\nincrement().then((result) =&gt; print('$result')); // prints '43'\n</code></pre>\n<h3>Do a Transaction</h3>\n<pre class=\"dart  \"><code>// Call actions in a transaction - they'll be done and undone together!\ntransact(() {\n  increment();\n  square();\n}).then((_) =&gt; print('${map[\"value\"]}')); // prints '1936'\n</code></pre>\n<h3>Undo and Redo</h3>\n<pre class=\"dart\"><code>// Bind undo / redo to keyboard events.\ndocument.onKeyUp.listen((e) {    \n  if (e.ctrlKey) {\n    if (e.keyCode == KeyCode.Z) {\n      undo();\n    } else if (e.keyCode == KeyCode.Y) {\n      redo();\n    }\n  }\n});\n</code></pre>\n<p><em>Undone uses the MIT license as described in the <a href=\"https://github.com/rmsmith/undone/blob/master/LICENSE\">LICENSE</a> file, and \nfollows <a href=\"http://semver.org/\">semantic versioning</a>.</em></p>"}