{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"undone","qualifiedName":"undone/undone","preview":"<p>A library for undo and redo.</p>","packageName":"undone","packageIntro":"<h1>Undone</h1>\n<p>A library for undo and redo.</p>\n<p><a href=\"https://drone.io/github.com/rmsmith/undone/latest\">!<a href=\"https://drone.io/github.com/rmsmith/undone/status.png\">Build Status</a></a> | <a href=\"http://rmsmith.github.com/undone/index.html#undone\">API documentation</a> | <a href=\"http://rmsmith.github.com/undone/nudge.html\">Try it!</a></p>\n<h2>Usage</h2>\n<h3>Create an Action from Functions</h3>\n<pre class=\"dart\"><code>// An argument for our undoable actions.\nvar map = { 'value' : 42 };\n  \n// Actions bind a 'Do' functon and an 'Undo' function together with arguments.\nDo _increment = (a) =&gt; ++a['value'];\nUndo _decrement = (a, r) =&gt; --a['value'];     \nvar increment = new Action(map, _increment, _decrement);\n</code></pre>\n<h3>Create an Action from a Custom Class</h3>\n<pre class=\"dart\"><code>// Use custom actions when you want your own class.\nclass Square extends Action {  \n  static _square(a) =&gt; a['value'] = a['value'] * a['value'];  \n  static _squareRoot(a, r) =&gt; a['value'] = math.sqrt(a['value']);  \n  Square(map): super(map, _square, _squareRoot);  \n}\n\nvar square = new Square(map);\n</code></pre>\n<h3>Do an Action</h3>\n<pre class=\"dart\"><code>// Call your action, and listen for the result (if you want) - its easy!\nincrement().then((result) =&gt; print('$result')); // prints '43'\n</code></pre>\n<h3>Do a Transaction</h3>\n<pre class=\"dart  \"><code>// Call actions in a transaction - they'll be done and undone together!\ntransact(() {\n  increment();\n  square();\n}).then((_) =&gt; print('${map[\"value\"]}')); // prints '1936'\n</code></pre>\n<h3>Undo and Redo</h3>\n<pre class=\"dart\"><code>// Bind undo / redo to keyboard events.\ndocument.onKeyUp.listen((e) {    \n  if (e.ctrlKey) {\n    if (e.keyCode == KeyCode.Z) {\n      undo();\n    } else if (e.keyCode == KeyCode.Y) {\n      redo();\n    }\n  }\n});\n</code></pre>\n<p><em>Undone uses the MIT license as described in the <a href=\"https://github.com/rmsmith/undone/blob/master/LICENSE\">LICENSE</a> file, and \nfollows <a href=\"http://semver.org/\">semantic versioning</a>.</em></p>"}],"introduction":"","filetype":"json"}